name: SetUP Environments

on:
  on-merge:
    if: github.event.pull_request.merged == true
    ##push:
    branches:
      - main
      - dev
  workflow_dispatch:
    branches:
      - main
      - dev
      - release/*
    tags:
      - v* # Matches tags like v1.0.0, v2.3.1
      - release-* # Matches tags like release-2024-01

    inputs:
      environment:
        description: "Choose environment"
        required: true
        default: dev
        type: choice
        options:
          - dev
          - qa

jobs:
  set-vars:
    runs-on: ubuntu-latest
    outputs:
      branchName: ${{ steps.set-branch.outputs.branchName }}
      envName: ${{ steps.set-env.outputs.envName }}
      tagName: ${{ steps.set-tag.outputs.tagName }}

    steps:
      - id: set-tag
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
              echo "tagName=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
      - id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "envName=${{ inputs.environment }}" >> $GITHUB_OUTPUT
            echo "branchName=${{ inputs.environment == 'qa' && 'main' || inputs.environment == 'dev' && 'dev' }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref_name }}" == "main" ]; then
            echo "envName=qa" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref_name }}" == "dev" ]; then
            echo "envName=dev" >> $GITHUB_OUTPUT
          else
            echo "envName=staging" >> $GITHUB_OUTPUT
          fi
      - id: set-branch
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "branchName=${{ inputs.environment == 'qa' && 'main' || inputs.environment == 'dev' && 'dev' }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref_type }}" == "branch" ]; then
            echo "branchName=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

  print-vars:
    runs-on: ubuntu-latest
    needs: set-vars
    env:
      GLOBAL_ENV: ${{ needs.set-vars.outputs.envName }}
      GLOBAL_BRANCH: ${{ needs.set-vars.outputs.branchName }}
      GLOBAL_TAG: ${{ needs.set-vars.outputs.tagName }}
    steps:
      - name: Print global env in job one
        run: echo "Job running on ${{ env.GLOBAL_ENV }}"
          echo "BRANCH running on ${{ env.GLOBAL_BRANCH }}"
          echo "TAG running on ${{ env.GLOBAL_TAG }}"

  test:
    runs-on: ubuntu-latest
    needs: set-vars
    env:
      GLOBAL_ENV: ${{ needs.set-vars.outputs.envName }}
      GLOBAL_BRANCH: ${{ needs.set-vars.outputs.branchName }}
      GLOBAL_TAG: ${{ needs.set-vars.outputs.tagName }}

    steps:
      - name: Use environment variables
        run: echo "Job running on ${{ env.GLOBAL_ENV }}"
          echo "BRANCH running on ${{ env.GLOBAL_BRANCH }}"
          echo "TAG running on ${{ env.GLOBAL_TAG }}"

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Run Tests
        run: mvn test
        ##working-directory: pic

  build:
    runs-on: ubuntu-latest
    needs: [test, set-vars]
    env:
      GLOBAL_ENV: ${{ needs.set-vars.outputs.envName }}
      GLOBAL_BRANCH: ${{ needs.set-vars.outputs.branchName }}
      GLOBAL_TAG: ${{ needs.set-vars.outputs.tagName }}

    steps:
      - name: Show environment
        run: echo "Job running on ${{ env.GLOBAL_ENV }}"
          echo "BRANCH running on ${{ env.GLOBAL_BRANCH }}"
          echo "TAG running on ${{ env.GLOBAL_TAG }}"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Say Hello
        run: echo "Hello from GitHub Actions ðŸš€"

      - name: Build Project
        run: mvn clean package -DskipTests=true
        ##working-directory: pic

  build-push-docker-images-qa:
    needs: [build, set-vars]
    if: ${{ needs.set-vars.outputs.envName == 'qa' }}
    environment: qa
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Project
        run: mvn clean package -DskipTests=true

      - name: create image and push to docker repo
        #uses: ./.github/actions/dockerImage
        uses: QUIDA5V/actions/docker@main
        with:
          gcp_sa_key: ${{ secrets.JSONKEY }}
          gcp_project_id: "back-438814"
          repository_url: "us-central1-docker.pkg.dev/back-438814/dummytest"
          docker_registry: "us-central1-docker.pkg.dev"
          image_name: "newimag"
          tag: "finaltag"

  build-push-docker-images-dev:
    needs: [build, set-vars]
    if: ${{ needs.set-vars.outputs.envName == 'dev' }}
    environment: dev
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Project
        run: mvn clean package -DskipTests=true

      - name: create image and push to docker repo
        ##uses: ./.github/actions/dockerImage
        uses: QUIDA5V/actions/docker@main
        with:
          gcp_sa_key: ${{ secrets.JSONKEY }}
          gcp_project_id: "back-438814"
          repository_url: "us-central1-docker.pkg.dev/back-438814/dummytest"
          docker_registry: "us-central1-docker.pkg.dev"
          image_name: "newimag"
          tag: "finaltag"
